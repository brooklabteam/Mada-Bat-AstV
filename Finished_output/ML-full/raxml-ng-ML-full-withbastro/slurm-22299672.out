
RAxML-NG v. 1.1.0-master released on 22.06.2022 by The Exelixis Lab.
Developed by: Alexey M. Kozlov and Alexandros Stamatakis.
Contributors: Diego Darriba, Tomas Flouri, Benoit Morel, Sarah Lutteropp, Ben Bettisworth.
Latest version: https://github.com/amkozlov/raxml-ng
Questions/problems/suggestions? Please visit: https://groups.google.com/forum/#!forum/raxml

System: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz, 28 cores, 62 GB RAM

RAxML-NG was called at 31-Aug-2022 09:12:55 as follows:

raxml-ng-mpi --msa alignment.phy --model TVM+I+G4 --prefix T5 --seed 2 --threads 7

Analysis options:
  run mode: ML tree search
  start tree(s): random (10) + parsimony (10)
  random seed: 2
  tip-inner: OFF
  pattern compression: ON
  per-rate scalers: OFF
  site repeats: ON
  fast spr radius: AUTO
  spr subtree cutoff: 1.000000
  branch lengths: proportional (ML estimate, algorithm: NR-FAST)
  SIMD kernels: AVX2
  parallelization: coarse-grained (auto), PTHREADS (7 threads), thread pinning: ON

[00:00:00] Reading alignment from file: alignment.phy
[00:00:00] Loaded alignment with 46 taxa and 10080 sites

Alignment comprises 1 partitions and 8687 patterns

Partition 0: noname
Model: TVM+FO+I+G4m
Alignment sites / patterns: 10080 / 8687
Gaps: 35.26 %
Invariant sites: 14.65 %


NOTE: Binary MSA file created: T5.raxml.rba

Parallelization scheme autoconfig: 1 worker(s) x 7 thread(s)

Error calling pthread_setaffinity_np: 22
Parallel reduction/worker buffer size: 1 KB  / 0 KB

[00:00:00] Generating 10 random starting tree(s) with 46 taxa
[00:00:00] Generating 10 parsimony starting tree(s) with 46 taxa
[00:00:00] Data distribution: max. partitions/sites/weight per thread: 1 / 1241 / 19856
[00:00:00] Data distribution: max. searches per worker: 20

ERROR: CPU core oversubscription detected! RAxML-NG will terminate now to avoid wasting resources.
NOTE:  Details: https://github.com/amkozlov/raxml-ng/wiki/Parallelization#core-oversubscription
NOTE:  You can use '--force perf_threads' to disable this check, but ONLY if you are 200% sure this is a false alarm!

--------------------------------------------------------------------------
MPI_ABORT was invoked on rank 0 in communicator MPI_COMM_WORLD
with errorcode -1.

NOTE: invoking MPI_ABORT causes Open MPI to kill all MPI processes.
You may or may not see output from other processes, depending on
exactly when Open MPI kills them.
--------------------------------------------------------------------------
